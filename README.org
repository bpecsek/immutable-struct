
* OPTIMA-IMMUTABLE-STRUCT 

+Simple+ Library that encourage the use of functional programming +
pattern matching.

+ =defstruct= --- provides truely nondestructive structure.
+ =typevar= --- naive way to define efficient algebraic data types
+ =ftype= --- shorthand expression of =declaim ftype=
+ =id-mixin= --- for a better hash function

** macro defstruct (name-and-options &rest slots)

A variation of defstruct, with read-only slots and automatically defined constructor.

+ Read-only :: using the standard cl feature.
+ Noninterned slot name :: Restricting the use of slot-value.
+ The constructor name :: (<name> &optional <slots...>) and has no keyword argument.
+ Pattern matcher :: (<name> &optional <slots...>), identical to the constructor.

** macro define-with-typevar ((typevars) &body body)

Defines some type variables and applies a special method to treat
=defstruct,ftype,defun= forms inside the body: they are stored for the
later instantiation of the type variables.

#+BEGIN_SRC lisp
(define-with-typevar (<s> <t>)
  (defstruct coordinate2
    (x 0 :type <s>)
    (y 0 :type <t>)
    (z 0 :type <s>))
  (ftype vector-+ (/ coordinate2 <s> <t>) (/ coordinate2 <s> <t>) (/ coordinate2 <s> <t>))
  (defun vector-+ (v1 v2)
    (declare (optimize (speed 3) (space 0) (safety 0) (debug 0)))
    (coordinate2
     (+ (coordinate2-x v1)
        (coordinate2-x v2))
     (+ (coordinate2-y v1)
        (coordinate2-y v2))
     (+ (coordinate2-z v1)
        (coordinate2-z v2)))))
#+END_SRC

The instantiation of the structures/functions can be achived later, with
functions =instantiate-structure= and =instantiate-ftype=.

Given the type values (vs type variables), several specialized instances of
functions/structures are defined automatically. New instances are named as
=<original name>{/<type>}*=, following the convention that can be seen in
some specialized functions in sbcl.

#+BEGIN_SRC lisp
(instantiate-ftype 'vector-+ 'fixnum 'fixnum)

;-->
; Instantiating a function VECTOR-+ with typevars (FIXNUM FIXNUM)
; (FTYPE VECTOR-+/FIXNUM/FIXNUM (/ COORDINATE2 FIXNUM FIXNUM) (/ COORDINATE2 FIXNUM FIXNUM)...)
; Instantiating a structure COORDINATE2 with typevars (FIXNUM FIXNUM)..
#+END_SRC

The type specifier for these structures can be referenced by =(/ lifted args...)=.
Upon the type expansion, it tries to instantiate the structure
instance. In other words, the type information /propagates/.

#+BEGIN_SRC lisp
(deftype / (name &rest args)
   (or (gethash (cons name args) *typevar-types*)
       (progn
         (apply #'instantiate-structure name args)
         (gethash (cons name args) *typevar-types*))
       (error "failed to expand the lifted structure type ~a with arguments ~a" name args)))
#+END_SRC

** macro ftype (name-or-names &rest types)

Abbreviation of =(declaim (ftype (function (<types...>) <type>) <name-or-names...>))=.
In a smart implementation like sbcl, using =ftype= declaration is preferred
over =the= and =(declare (type ...))=.

Besides, =defun= and =ftype= both have 5 characters and gives cleaner code.

** structue id-mixin

It has an only slot named =id= and meant to be :include-ed into the
structure. It has a fixnum value, and a random value is assigned to this
slot on each instantiation.

This is particularly important when using a hash table to avoid duplicated
evaluation. The performance of the hash function affects the rate of hash
conflict. However, SBCL yields the same sxhash value for the instances of the same
class, and results in a bad hashing result.

https://github.com/guicho271828/optima-bdd contains some usage.

** Dependencies

This library is at least tested on implementation listed below:

+ SBCL 1.2.8 on X86-64 Linux  3.13.0-45-generic (author's environment)

Also, it depends on the following libraries:

+ optima by Tomohiro Matsuyama ::
    Optimized Pattern Matching Library

+ alexandria by  ::
    Alexandria is a collection of portable public domain utilities.

+ iterate by  ::
    Jonathan Amsterdam's iterator/gatherer/accumulator facility



** Installation


** Author

+ Masataro Asai (guicho2.71828@gmail.com)

* Copyright

Copyright (c) 2015 Masataro Asai (guicho2.71828@gmail.com)


* License

Licensed under the LLGPL License.



